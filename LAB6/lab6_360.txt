/********* super.c code ***************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

typedef unsigned int   u32;

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc  GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode       INODE;
typedef struct ext2_dir_entry_2 DIR;    // need this for new version of e2fs

GD    *gp;
SUPER *sp;
INODE *ip;
DIR   *dp; 

#define BLKSIZE 1024

/******************* in <ext2fs/ext2_fs.h>*******************************
struct ext2_super_block {
  u32  s_inodes_count;       // total number of inodes
  u32  s_blocks_count;       // total number of blocks
  u32  s_r_blocks_count;     
  u32  s_free_blocks_count;  // current number of free blocks
  u32  s_free_inodes_count;  // current number of free inodes 
  u32  s_first_data_block;   // first data block in this group
  u32  s_log_block_size;     // 0 for 1KB block size
  u32  s_log_frag_size;
  u32  s_blocks_per_group;   // 8192 blocks per group 
  u32  s_frags_per_group;
  u32  s_inodes_per_group;    
  u32  s_mtime;
  u32  s_wtime;
  u16  s_mnt_count;          // number of times mounted 
  u16  s_max_mnt_count;      // mount limit
  u16  s_magic;              // 0xEF53
  // A FEW MORE non-essential fields
};
**********************************************************************/

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[ ])
{
  lseek(fd, (long)blk*BLKSIZE, 0);
  read(fd, buf, BLKSIZE);
}

super()
{
  // read SUPER block
  get_block(fd, 1, buf);  
  sp = (SUPER *)buf;

  // check for EXT2 magic number:

  printf("s_magic = %x\n", sp->s_magic);
  if (sp->s_magic != 0xEF53){
    printf("NOT an EXT2 FS\n");
    exit(1);
  }

  printf("EXT2 FS OK\n");

  printf("s_inodes_count = %d\n", sp->s_inodes_count);
  printf("s_blocks_count = %d\n", sp->s_blocks_count);

  printf("s_free_inodes_count = %d\n", sp->s_free_inodes_count);
  printf("s_free_blocks_count = %d\n", sp->s_free_blocks_count);
  printf("s_first_data_blcok = %d\n", sp->s_first_data_block);


  printf("s_log_block_size = %d\n", sp->s_log_block_size);
  printf("s_log_frag_size = %d\n", sp->s_log_frag_size);

  printf("s_blocks_per_group = %d\n", sp->s_blocks_per_group);
  printf("s_frags_per_group = %d\n", sp->s_frags_per_group);
  printf("s_inodes_per_group = %d\n", sp->s_inodes_per_group);


  printf("s_mnt_count = %d\n", sp->s_mnt_count);
  printf("s_max_mnt_count = %d\n", sp->s_max_mnt_count);

  printf("s_magic = %x\n", sp->s_magic);

  printf("s_mtime = %s", ctime(&sp->s_mtime));
  printf("s_wtime = %s", ctime(&sp->s_wtime));


}

char *disk = "mydisk";

main(int argc, char *argv[ ])

{ 
  if (argc > 1)
    disk = argv[1];
  fd = open(disk, O_RDONLY);
  if (fd < 0){
    printf("open failed\n");
    exit(1);
  }

  super();
}

***** SAMPLE OUTPUTs of super.c ****************
s_inodes_count                 =      184
s_blocks_count                 =     1440
s_free_inodes_count            =      174
s_free_blocks_count            =     1411
s_log_block_size               =        0
s_blocks_per_group             =     8192
s_inodes_per_group             =      184
s_mnt_count                    =        1
s_max_mnt_count                =       34
s_magic                        =     ef53
s_mtime = Mon Feb  9 07:08:22 2004
s_inode_size                   =      128
************************************************

2. WRITE YOUR OWN gd.c to print information of Group Descriptor 0


3.
/**************** imap.c file *************************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc  GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode       INODE;
typedef struct ext2_dir_entry_2 DIR;    // need this for new version of e2fs

#define BLKSIZE 1024

GD    *gp;
SUPER *sp;
INODE *ip;
DIR   *dp; 

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[ ])
{
  lseek(fd, (long)blk*BLKSIZE, 0);
   read(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
  int i, j;
  i = bit / 8;  j = bit % 8;
  if (buf[i] & (1 << j))
     return 1;
  return 0;
}

imap()
{
  char buf[BLKSIZE];
  int  imap, ninodes;
  int  i;

  // read SUPER block
  get_block(fd, 1, buf);
  sp = (SUPER *)buf;

  ninodes = sp->s_inodes_count;
  printf("ninodes = %d\n", ninodes);

  // read Group Descriptor 0
  get_block(fd, 2, buf);
  gp = (GD *)buf;

  imap = gp->bg_inode_bitmap;
  printf("bmap = %d\n", imap);

  // read inode_bitmap block
  get_block(fd, imap, buf);

  for (i=0; i < ninodes; i++){
    (tst_bit(buf, i)) ?	putchar('1') : putchar('0');
    if (i && (i % 8)==0)
       printf(" ");
  }
  printf("\n");
}

char *disk = "mydisk";

main(int argc, char *argv[ ])
{
  if (argc > 1)
    disk = argv[1];

  fd = open(disk, O_RDONLY);
  if (fd < 0){
    printf("open %s failed\n", disk);
    exit(1);
  }

  imap();
}
*********************** SAMPLE Imap ***********************************
11111111 11000000 00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 00000000 00000000 00000000 11111111 
***********************************************************************


4. WRITE YOUR OWN bmap.c to print the blocks bitmap


5. 
/********* inode.c: print information in / INODE (INODE #2) *********/

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

#define BLKSIZE 1024

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc  GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode       INODE;
typedef struct ext2_dir_entry_2 DIR;    // need this for new version of e2fs

GD    *gp;
SUPER *sp;
INODE *ip;
DIR   *dp; 

int fd;
int iblock;

int get_block(int fd, int blk, char buf[ ])
{
  lseek(fd,(long)blk*BLKSIZE, 0);
   read(fd, buf, BLKSIZE);
}

inode()
{
  char buf[BLKSIZE];

  // read GD
  get_block(fd, 2, buf);
  gp = (GD *)buf;
  /****************
  printf("%8d %8d %8d %8d %8d %8d\n",
	 gp->bg_block_bitmap,
	 gp->bg_inode_bitmap,
	 gp->bg_inode_table,
	 gp->bg_free_blocks_count,
	 gp->bg_free_inodes_count,
	 gp->bg_used_dirs_count);
  ****************/ 
  iblock = gp->bg_inode_table;   // get inode start block#
  printf("inode_block=%d\n", iblock);

  // get inode start block     
  get_block(fd, iblock, buf);

  ip = (INODE *)buf + 1;         // ip points at 2nd INODE
  
  printf("mode=%4x ", ip->i_mode);
  printf("uid=%d  gid=%d\n", ip->i_uid, ip->i_gid);
  printf("size=%d\n", ip->i_size);
  printf("time=%s", ctime(&ip->i_ctime));
  printf("link=%d\n", ip->i_links_count);
  printf("i_block[0]=%d\n", ip->i_block[0]);

 /*****************************
  u16  i_mode;        // same as st_imode in stat() syscall
  u16  i_uid;                       // ownerID
  u32  i_size;                      // file size in bytes
  u32  i_atime;                     // time fields  
  u32  i_ctime;
  u32  i_mtime;
  u32  i_dtime;
  u16  i_gid;                       // groupID
  u16  i_links_count;               // link count
  u32  i_blocks;                    // IGNORE
  u32  i_flags;                     // IGNORE
  u32  i_reserved1;                 // IGNORE
  u32  i_block[15];                 // IMPORTANT, but later
 ***************************/
}

char *disk = "mydisk";
main(int argc, char *argv[])
{ 
  if (argc > 1)
    disk = argv[1];

  fd = open(disk, O_RDONLY);
  if (fd < 0){
    printf("open %s failed\n", disk);
    exit(1);
  }

  inode();
}
******************************
inode_block = 10
mode=    41ed  
uid=0  
gid=0
size=1024
time=Mon Feb  9 07:32:16 2014
link=3
i_block[0]=33
******************************

6. WRITE YOUR dir.c to print ALL files under the / directory:

              HOW TO STEP THROUGH dir_entries:

Assume the root directory / contains entries 
           this  is  aVeryLongName short
Then the 0th data block (i_block[0] in its inode) of this DIR contains:
 
|2 12 1.|2 12 2..|11 12 4this|12 12 2is|13 24 13aVeryLongName|14 952 5short   |

Each record has a rec_len and a name_len field.

First, read the block into a char buf[1024].
Let DIR *dp and char *cp BOTH point at buf;
Use dp-> to access the fields of the record, e.g. print its name

                    TO MOVE TO THE NEXT entry:
        cp += dp->rec_len;       // advance cp by rec_len BYTEs
        dp = (shut-up)cp;        // pull dp along to the next record

This way, you can step through ALL the record entries of a DIR file.

7. /******* ialloc.c: allocate a free INODE, return its inode number ******/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc  GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode       INODE;
typedef struct ext2_dir_entry_2 DIR;    // need this for new version of e2fs

#define BLKSIZE 1024

GD    *gp;
SUPER *sp;
INODE *ip;
DIR   *dp; 

/********** globals *************/
int fd;
int imap, bmap;  // IMAP and BMAP block number
int ninodes, nblocks, nfreeInodes, nfreeBlocks;

int get_block(int fd, int blk, char buf[ ])
{
  lseek(fd, (long)blk*BLKSIZE, 0);
  read(fd, buf, BLKSIZE);
}
int put_block(int fd, int blk, char buf[ ])
{
  lseek(fd, (long)blk*BLKSIZE, 0);
  write(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
  int i, j;
  i = bit/8; j=bit%8;
  if (buf[i] & (1 << j))
     return 1;
  return 0;
}

int set_bit(char *buf, int bit)
{
  int i, j;
  i = bit/8; j=bit%8;
  buf[i] |= (1 << j);
}

int clr_bit(char *buf, int bit)
{
  int i, j;
  i = bit/8; j=bit%8;
  buf[i] &= ~(1 << j);
}

int decFreeInodes(int dev)
{
  char buf[BLKSIZE];

  // dec free inodes count in SUPER and GD
  get_block(dev, 1, buf);
  sp = (SUPER *)buf;
  sp->s_free_inodes_count--;
  put_block(dev, 1, buf);

  get_block(dev, 2, buf);
  gp = (GD *)buf;
  gp->bg_free_inodes_count--;
  put_block(dev, 2, buf);
}

int ialloc(int dev)
{
  int  i;
  char buf[BLKSIZE];

  // read inode_bitmap block
  get_block(dev, imap, buf);

  for (i=0; i < ninodes; i++){
    if (tst_bit(buf, i)==0){
       set_bit(buf,i);
       decFreeInodes(dev);

       put_block(dev, imap, buf);

       return i+1;
    }
  }
  printf("ialloc(): no more free inodes\n");
  return 0;
}

char *disk = "mydisk";

main(int argc, char *argv[ ])
{
  int i, ino;
  char buf[BLKSIZE];

  if (argc > 1)
    disk = argv[1];

  fd = open(disk, O_RDWR);
  if (fd < 0){
    printf("open %s failed\n", disk);
    exit(1);
  }

  // read SUPER block
  get_block(fd, 1, buf);
  sp = (SUPER *)buf;

  ninodes = sp->s_inodes_count;
  nblocks = sp->s_blocks_count;
  nfreeInodes = sp->s_free_inodes_count;
  nfreeBlocks = sp->s_free_blocks_count;
  printf("ninodes=%d nblocks=%d nfreeInodes=%d nfreeBlocks=%d\n", 
	 ninodes, nblocks, nfreeInodes, nfreeBlocks);

  // read Group Descriptor 0
  get_block(fd, 2, buf);
  gp = (GD *)buf;

  imap = gp->bg_inode_bitmap;
  printf("imap = %d\n", imap);
  getchar();

  for (i=0; i < 5; i++){  
    ino = ialloc(fd);
    printf("allocated ino = %d\n", ino);
  }
}


8. WRITE YOUR balloc.c, which allocates a FREE block, return its block number


/********** DO THESE ON YOUR OWN: no need to turn in **********************/

9.  WRITE idealloc(int dev, int ino), which deallocates an inode number, ino

10. WRITE bdealloc(int dev, int bno), which deallocates an block number, bno






 READING: Chapter 2: 2.7-2.8
-------------------------------------------------------------------------------
                NOTE YEE STUPID UBUNTU USERS:
In case you don't have <ext2fs/ext2_fs.h>,(MOST UbuntuS do NOT!!) 
but almost ALL other Linux have!!

1.       sudo apt-get install e2fslibs-dev
   to install  (to your /usr/include/ directory)

2. Go to that directory, open ext2_fs.h file to see the 
         SUPER, INOODE, DIR structures.
===========================================================
3. OR download ~samples/LAB5/ext2type.h and use it instead.
===========================================================

                DUE: Sumbission Week of NOV 1,2015

/***************  DUE & DEMO : Week of NOV 1,2015 ********************
 Write a C program, showblock, which displays the disk blocks of a file 
 in an EXT2 file system. The program runs as follows

       showblock   DEVICE    PATHNAME

e.g.   showblock   mydisk    /a/b/c/d

 It locates the file named PATHNAME and prints the disk blocks (direct, 
 indirect, double-indirect) of the file.
***********************************************************************/ 

               HOW TO Traverse EXT2 File System Tree

1. Traverse the EXT2 FS tree
   Given a device, e.g. mydisk (a virtual FD image), containing an ext2 file
   system, and a pathname, e.g. /cs360/is/fun of a file, find the file.

   NOTE!!! To find a file amounts to finding its INODE. 
           From the inode, you have ALL the information of a file.
  
2. ALGORITHM
  
(0). Read a disk block into a buffer: Write a get_block() function

     #define BLKSIZE 1024

     get_block(int fd, int blk, char buf[BLKSIZE])
     {
         lseek(fd, (long)(blk*BLKSIZE), 0);
         read(fd, buf, BLKSIZE);
     }


(1). Open the device for READ: int fd = open(device, O_RDONLY);
 
   Read in Superblock (blk #1) to verify it's indeed an ext2 FS. (HOW?)

   (With the SuperBlock read in, you might as well print some of its important
    fields, e.g. nblocks, ninodes, ngroups, inodes_per_group, number of free 
    inodes and blocks, etc.
   )

(2). Read in the group descriptor block (block #2 for FD) and access Group0 
   Descriptor. From its bg_inode_table entry, determine where INODEs begin on 
   the disk. Call it the InodesBeginBlock.  

(3). Read in InodeBeginBlock to get the inode of /, which is INODE #2.
     NOTE: inode number counts from 1. Technique:

         char buf[1024]; 
         get_block(fd, inodeBeginBlock, buf)
         INODE *ip = (INODE *)buf + 1;

(4). Break up pathname into components and let the number of components be n,
     Example:
                            |<----- n = 3  ---->|
         /cs360/is/fun  ==> cs360     is      fun 

   Denote the token strings by name[0], name[1], ..., name[n-1]

   YOU HAVE DONE THESE MANY TIMES BEFORE!!!

(5). Start from the root INODE in (3), search for name[0] in its data block(s).
   For DIR inodes, you may assume that (the number of entries is small so that)
   it only has 12 DIRECT data blocks. Therefore, search only the direct blocks 
   for name[0].

   Each data block of a DIR inode contains DIR structures of the form 

   BLOCK0: [ino 12 1 .   ] [ino 12 2 ..  ] [ino rlen nlen NAME ] ....
  
   BLOCK1: [ino rlen nlen NAME] [ino rlen nlen NAME] [ino rlen nlen NAME ] ....
   etc.
   
   where each NAME is a seqeunce of nlen chars (without terminating NULL !!!) 
   You may use nlen to extract the NAME string, and rlen to advance to the 
   next DIR structure. The technique is

        char buf[1024];
        DIR  *dp = (DIR *dp)buf    // access buf[] as DIR entries
        char *cp = buf;            // char pointer pointing at buf[ ]

        read a block into buf[ ];
        while(cp < buf + BLKSIZE){
           if (name[0] matches dp->NAME)
              return dp->ino;
           cp += dp->rlen;         // advance cp by rlen in bytes
           dp = (SHUT_UP)cp;       // pull dp to the next DIR entry
        }

   If name[0] exists. you can find its inode number.

(6). Use the inode number, ino, to locate the corresponding INODE:
     Recall that ino counts from 1.  Use the Mailman's algorithm

               (ino - 1) / 8    and   InodeBeginBlock    
               (ino - 1) % 8 
               
     to read in the INODE of /cs360

   NOTE: the number 8 comes from: for FD, blockSize=1024 and inodeSize=128. 
         If BlockSize != 1024, you must adjust the number 8 accordingly.

   From the INODE of /cs360, you can easily determine whether it's a DIR.
   (Remember S_ISDIR(), S_ISREG() ?)
  
   If it's not a DIR, there can't be anything like /cs360/is ...., so give up.

   If it's a DIR and there are more components yet to search (BAD NEWS!)
   you must go on.

   The problem now becomes:
       Search for name[1] in the INODE of /cs360
   which is exactly the same as that of Step (5).

(7). Since Steps (5)-(6) will be repeated n times, you should write a function
 
     int search(INODE *inodePtr, char *name)
         {
           // search for name in the data blocks of this INODE
           // if found, return name's ino;
           // return 0
         }


(8). Then, all you have to do is call search() n times, as sketched below.

     Assume:  n,  name[0], ...., name[n-1]   are globals

     ip --> INODE of /

     for (i= 0; i < n; i++){
         inumber = search(ip, name[i])  
         if (inumber == 0) : can't find name[i], BOMB OUT!
         -------------------------------------------------------
         use inumber to read in its INODE and let ip --> this INODE 
     }
  
     // if you reach here, you must have ip --> the INODE of pathname.


(9). Extract information from ip --> as required.
     Pat yourself on the back and say: Good Job!

**************************************************************************
             Self Challenge and EXTRA CREDITS (50%):

   Make your showblock work (CORRECTLY!) for EXT2/3 FS on hard disks.

NOTE: In order to adpat your showblock.c program for HDs, you must do some 
RESEARCH about ext2/3 FS on large HD partitions. You can get the full extra 
credit only if you can

====================================================
1. login to YOUR account on cs360.eecs.wsu.edu
2  Run your showblock program as
       sudo a.out /dev/sda1 /home/YOURACCOUNT/LAB5/a.out
   AND it generates the right outputs.
====================================================

10. SAMPLES SOLUTION in samples/LAB5/:
            showblock.bin, diskimage
    Run it under Linux as
            showblock.bin DEVICE pathname 

    e.g.    showblock diskimage /Z/hugefile